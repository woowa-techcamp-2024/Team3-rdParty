plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.diffplug.spotless' version '6.23.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.thirdparty'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.17.6'
    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //security
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //test
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation "org.testcontainers:testcontainers:1.20.1"
    testImplementation 'org.testcontainers:mysql:1.20.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
}

spotless {
    java {
        target 'src/**/*.java' // 대상 파일 지정
        googleJavaFormat().aosp()
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('spotlessJava') {
    dependsOn 'copyYml'
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

tasks.register('copyYml') {
    def dupStr = DuplicatesStrategy.INCLUDE
    def src = "backend-config"
    def fileExt = "**/*.yml"
    copy {
        duplicatesStrategy = dupStr
        from(src) {
            include(fileExt)
        }
        into("src/main/resources")
    }
}

build {
    mustRunAfter copyDocument
    dependsOn copyYml
}
